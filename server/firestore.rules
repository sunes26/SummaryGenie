rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // ===== 헬퍼 함수 =====
    
    /**
     * 사용자 본인 확인
     * @param {string} userId - 확인할 사용자 ID
     * @returns {boolean} 본인 여부
     */
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }
    
    /**
     * 관리자 권한 확인
     * @returns {boolean} 관리자 여부
     */
    function isAdmin() {
      return request.auth != null && 
             request.auth.token.admin == true;
    }
    
    /**
     * 인증된 사용자 확인
     * @returns {boolean} 인증 여부
     */
    function isAuthenticated() {
      return request.auth != null;
    }
    
    /**
     * 문자열 유효성 검증
     * @param {string} value - 검증할 값
     * @param {number} minLen - 최소 길이
     * @param {number} maxLen - 최대 길이
     * @returns {boolean} 유효성 여부
     */
    function isValidString(value, minLen, maxLen) {
      return value is string && 
             value.size() >= minLen && 
             value.size() <= maxLen;
    }
    
    /**
     * URL 형식 검증
     * @param {string} url - 검증할 URL
     * @returns {boolean} 유효성 여부
     */
    function isValidUrl(url) {
      return url is string && 
             url.matches('https?://.*');
    }
    
    /**
     * 날짜 형식 검증 (YYYY-MM-DD)
     * @param {string} dateStr - 검증할 날짜 문자열
     * @returns {boolean} 유효성 여부
     */
    function isValidDateFormat(dateStr) {
      return dateStr is string && 
             dateStr.matches('[0-9]{4}-[0-9]{2}-[0-9]{2}');
    }
    
    /**
     * 배열 유효성 검증
     * @param {array} arr - 검증할 배열
     * @param {number} maxLen - 최대 길이
     * @returns {boolean} 유효성 여부
     */
    function isValidArray(arr, maxLen) {
      return arr is list && arr.size() <= maxLen;
    }
    
    // ===== 기본 규칙: 모든 접근 거부 =====
    match /{document=**} {
      allow read, write: if false;
    }
    
    // ===== 1. /users/{userId} - 사용자 프로필 =====
    match /users/{userId} {
      // 읽기: 본인만 가능
      allow read: if isOwner(userId) || isAdmin();
      
      // 생성: 인증된 사용자, 본인 문서만
      allow create: if isAuthenticated() && 
                      isOwner(userId) &&
                      request.resource.data.keys().hasAll(['email', 'createdAt']) &&
                      isValidString(request.resource.data.email, 3, 100);
      
      // 수정: 본인만 가능, 필수 필드 보존
      allow update: if isOwner(userId) &&
                      request.resource.data.keys().hasAll(['email', 'createdAt']) &&
                      request.resource.data.createdAt == resource.data.createdAt;
      
      // 삭제: 본인만 가능
      allow delete: if isOwner(userId);
      
      // ===== 2. /users/{userId}/history/{historyId} - 히스토리 =====
      match /history/{historyId} {
        // 읽기: 본인만, 삭제되지 않은 문서
        allow read: if isOwner(userId) && 
                      (resource == null || resource.data.deletedAt == null);
        
        // 생성: 본인만, 데이터 검증
        allow create: if isOwner(userId) &&
                        validateHistoryData(request.resource.data);
        
        // 수정: 본인만, 특정 필드만 수정 가능
        allow update: if isOwner(userId) &&
                        request.resource.data.userId == userId &&
                        request.resource.data.createdAt == resource.data.createdAt &&
                        validateHistoryUpdate(request.resource.data);
        
        // 삭제: 본인만 (Hard delete)
        allow delete: if isOwner(userId);
      }
    }
    
    // ===== 3. /usage/{userId}/daily/{date} - 사용량 추적 =====
    match /usage/{userId}/daily/{date} {
      // 읽기: 본인만
      allow read: if isOwner(userId) || isAdmin();
      
      // 쓰기: 서버(관리자)만
      allow create: if isAdmin() &&
                      validateUsageData(request.resource.data, userId, date);
      
      allow update: if isAdmin() &&
                      request.resource.data.userId == userId &&
                      request.resource.data.date == date;
      
      // 삭제: 서버(관리자)만
      allow delete: if isAdmin();
    }
    
    // ===== 4. /subscriptions/{userId} - 구독 정보 =====
    match /subscriptions/{userId} {
      // 읽기: 본인 또는 관리자
      allow read: if isOwner(userId) || isAdmin();
      
      // 쓰기: 서버(관리자)만
      allow write: if isAdmin();
    }
    
    // ===== 헬스체크 컬렉션 (테스트용) =====
    match /_health/{document} {
      allow read, write: if isAdmin();
    }
    
    // ===== 데이터 검증 함수 =====
    
    /**
     * 히스토리 데이터 검증
     * @param {map} data - 검증할 데이터
     * @returns {boolean} 유효성 여부
     */
    function validateHistoryData(data) {
      return data.keys().hasAll(['id', 'userId', 'title', 'url', 'summary', 'qaHistory', 'metadata', 'createdAt', 'updatedAt', 'deletedAt']) &&
             // id 검증
             data.id is string &&
             data.id.size() > 0 &&
             // userId 검증
             data.userId is string &&
             // title 검증 (1-500자)
             isValidString(data.title, 1, 500) &&
             // url 검증
             isValidUrl(data.url) &&
             data.url.size() <= 2048 &&
             // summary 검증 (1-10000자)
             isValidString(data.summary, 1, 10000) &&
             // qaHistory 검증 (최대 100개)
             isValidArray(data.qaHistory, 100) &&
             validateQAHistory(data.qaHistory) &&
             // metadata 검증
             validateMetadata(data.metadata) &&
             // 타임스탬프 검증
             data.createdAt is timestamp &&
             data.updatedAt is timestamp &&
             (data.deletedAt == null || data.deletedAt is timestamp);
    }
    
    /**
     * 히스토리 업데이트 검증
     * @param {map} data - 검증할 데이터
     * @returns {boolean} 유효성 여부
     */
    function validateHistoryUpdate(data) {
      return data.keys().hasAll(['id', 'userId', 'title', 'url', 'summary', 'qaHistory', 'metadata', 'createdAt', 'updatedAt']) &&
             // title 검증
             isValidString(data.title, 1, 500) &&
             // url 검증
             isValidUrl(data.url) &&
             // summary 검증
             isValidString(data.summary, 1, 10000) &&
             // qaHistory 검증
             isValidArray(data.qaHistory, 100) &&
             // updatedAt은 새로운 타임스탬프여야 함
             data.updatedAt is timestamp;
    }
    
    /**
     * QA 히스토리 배열 검증
     * @param {array} qaHistory - 검증할 QA 배열
     * @returns {boolean} 유효성 여부
     */
    function validateQAHistory(qaHistory) {
      return qaHistory.size() == 0 || 
             (qaHistory.size() > 0 && 
              validateQAItem(qaHistory[0]));
    }
    
    /**
     * 단일 QA 항목 검증
     * @param {map} qa - 검증할 QA 항목
     * @returns {boolean} 유효성 여부
     */
    function validateQAItem(qa) {
      return qa.keys().hasAll(['question', 'answer', 'timestamp']) &&
             isValidString(qa.question, 1, 5000) &&
             isValidString(qa.answer, 1, 5000) &&
             qa.timestamp is timestamp;
    }
    
    /**
     * 메타데이터 검증
     * @param {map} metadata - 검증할 메타데이터
     * @returns {boolean} 유효성 여부
     */
    function validateMetadata(metadata) {
      return metadata.keys().hasAll(['domain', 'language', 'wordCount', 'tags']) &&
             metadata.domain is string &&
             metadata.domain.size() <= 255 &&
             metadata.language is string &&
             metadata.language.size() <= 10 &&
             metadata.wordCount is number &&
             metadata.wordCount >= 0 &&
             metadata.wordCount <= 1000000 &&
             metadata.tags is list &&
             metadata.tags.size() <= 20;
    }
    
    /**
     * 사용량 데이터 검증
     * @param {map} data - 검증할 데이터
     * @param {string} userId - 사용자 ID
     * @param {string} date - 날짜
     * @returns {boolean} 유효성 여부
     */
    function validateUsageData(data, userId, date) {
      return data.keys().hasAll(['userId', 'date', 'summary_count', 'question_count', 'total_count', 'isPremium', 'createdAt', 'updatedAt']) &&
             data.userId == userId &&
             data.date == date &&
             isValidDateFormat(data.date) &&
             data.summary_count is number &&
             data.summary_count >= 0 &&
             data.summary_count <= 10000 &&
             data.question_count is number &&
             data.question_count >= 0 &&
             data.question_count <= 10000 &&
             data.total_count is number &&
             data.total_count >= 0 &&
             data.total_count <= 20000 &&
             data.isPremium is bool &&
             data.createdAt is timestamp &&
             data.updatedAt is timestamp;
    }
  }
}